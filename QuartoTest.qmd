---
title: "QuartoTest"
author: "Annaig, Marina et Mary"
date: today
engine: knitr
# title-block-banner: true ("#EEAEEE")
# title-block-banner: "#EEAEEE"
title-block-banner: true
execute:
  echo: true
format: 
   html: 
      theme: 
          light: flatly
          dark: darkly
      code-fold: false
      number-sections: true
      toc: true
#bibliography : biblio.bib
---

# Annaïg

## Sources

## Qu'est-ce que le Quarto ? 
Il s'agit d'un moyen de rendre des fichiers sources en texte qui contiennent du code écrit en Python, R, Observable ou Julia.

## Installation

D'abord il faut installer quarto en suivant les [instructions](https://quarto.org/docs/get-started/).

Pour éxécuter des fichiers qmd sur Rstudio et pouvoir les prévisualiser, il est nécessaire d'avoir la nouvelle version de RStudio (2022.07) et d'installer le package `quarto`.
```{r}
#| eval: false
install.packages("quarto")
```

Maintenant on peut créer directement un nouveau fichier qmd dans File \> New File \> Quarto document.

## Principales différences entre R Markdown et Quarto 

* Il faut appeler rmarkdown depuis R pour l'utiliser. Cela signifie que, par exemple, un utilisateur de Python doit effectuer des installations supplémentaires.

* Au lieu d'être un package R, Quarto est un logiciel distinct, que l'on peut appeler depuis la ligne de commande. Cela signifie que d'autres logiciels peuvent l'utiliser pour créer leurs propres documents de programmation lettrés.

* Quarto semble être beaucoup plus cohérent. Par exemple, au lieu d'avoir un fichier _bookdown.yml spécial pour le bookdown, qui nécessite également un fichier _output.yml spécial, il y a maintenant un seul fichier _quarto.yml.

R markdown utilise knitr pour communiquer avec R et gérer la génération du document. Mais avec quarto, nous avons cette interface générale, où quarto peut parler à différents langages de programmation.

## Transformer un .Rmd en .qmd

Il suffit de changer l'extension de notre fichier. Le code ci-dessous permet d'identifier les fichiers .Rmd et modifier leur extension en .qmd (code issus de https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/)

```{r}
# library(fs)
# library(stringr)
# rmd_names <- dir_ls(path = ".", glob = "*.Rmd")
# qmd_names <- str_replace(string = rmd_names,
#                          pattern = "Rmd",
#                          replacement = "qmd")
# file_move(path = rmd_names,
#           new_path = qmd_names)

```


## Coder en R et Python dans un même fichier qmd

```{r}
#| echo: true
library(reticulate)
```

Pour coder en R, préciser {r} au début de la cellule :

## Les avantages

Alors que les documents RMarkdown utilisent `R` et `knitr` pour compiler le document, `Quarto` exécute chaque bloc (chunk) avec des "engines" différentes ce qui permet de mélanger les langages de programmations et d'obtenir des documents reproductibles. `Quarto` découle directement de `RMarkdown` ce qui explique de faibles différences en terme d'implémentation.

::: callout-note
Rmarkdown reste très actif et ne sera pas obsolète !
:::

## Récupération de variables R dans un code Python

Afin d'utiliser Python, il faut définir dans `Tools --> Global Options --> Python` la version que l'on souhaite utiliser.

::: callout-tip
Il est possible d'utiliser un environnement Conda.
:::

On souhaite la récupérer et l'utiliser dans un calcul Python. Par exemple, on considère la variable a :

```{r, eval = TRUE}
a = 1:30
```

On récupère le premier élément du vecteur a :

```{python, eval = TRUE}
print(r.a[0])
b = r.a[0] + 1
print(b)
```

## Récupération de variables Python dans un code Python

Pour réaliser l'inverse, la démarche est moins facilitée par `Quarto`:

::: {.callout-caution collapse="true"}
## Il faut télécharger reticulate afin de pouvoir récupérer les valeurs de sortie d'une variable `Python` depuis `R`.
:::

On définit la variable c qui dépend de la variable `Python` b de tout à l'heure et du premier élément de la variable `R` a :

```{r, eval = TRUE}
c = reticulate::py$b + a[1]
print(c)
```

## Tableau

```{r}
#| echo: fenced
#| label: vecteur_R
vect <- 1:6
vect
vect[1]
class(vect)
```

Pour coder en python, préciser {python} au début de la cellule :

```{python}
#| echo: true
#| label: vecteur_py
import numpy as np
vect = np.array([1,2,3])
print(vect)
print(vect[0])
type(vect)
```

Pour utiliser un objet R avec python, appeler l'objet avec "r." devant :

```{python}
#| echo: true
#| label: vecteur_rInpy
print(r.vect)
print(r.vect[0])
type(r.vect)
```

Pour utiliser un objet python avec R, appeler l'objet avec "py\$" devant :

```{r}
#| echo: true
#| label: vecteur_pyInR
py$vect
py$vect[1]
class(py$vect)
```

## Transformer un .Rmd en .qmd

Il suffit de changer l'extension de notre fichier. Le code ci-dessous permet d'identifier les fichiers .Rmd et modifier leur extension en .qmd (code issus du [blog de njtierney](https://www.njtierney.com/post/2022/04/11/rmd-to-qmd/))

```{r}
#| eval: false
library(fs)
library(stringr)
rmd_names <- dir_ls(path = ".", glob = "*.Rmd")
qmd_names <- str_replace(string = rmd_names,
                         pattern = "Rmd",
                         replacement = "qmd")
file_move(path = rmd_names,
          new_path = qmd_names)
```

# Marinq

# Mary


## Beaucoup de choses ne changent pas ...

:::: columns
::: {.column width="50%"} 
On peut également faire un tableau de texte : couper la page en plusieurs parties (ici à la moitié), pour y insérer du texte en colonne.
:::

::: {.column width="50%"} 
Et voici la deuxième moitié.
:::
::::

### Diagramme
```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

### Les listes

-   Faire des listes comme ça

    -   et des plus après pour une sous liste
    -   et voilà

-   Dernier élément de la liste

### Insertion d'images

::: {layout="[[80], [1,1]]"}
![Karaoke de ce soir](image02.jpg){#micro}

![Biere artisanale](image01.jpg){#biere}

![Patisseries](image03.jpg){#gateau}
:::

# Autre
